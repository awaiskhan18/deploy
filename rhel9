sudo apt update && apt upgrade -y
sudo add-apt-repository ppa:ondrej/php
sudo apt update -y
sudo apt install php8.2 -y



*** remove apache2 if exist

sudo service apache2 stop
sudo apt-get purge apache2 apache2-utils apache2.2-bin apache2-common
//or
sudo apt-get purge apache2 apache2-utils apache2-bin apache2.2-common
sudo apt-get autoremove
which apache2


apt get install libapache2-mod-php php8.2-mbstring php8.2-xmlrpc php8.2-soap php8.2-gd php8.2-xml php8.2-cli php8.2-zip php8.2-bcmath php8.2-tokenizer curl nginx mariadb-server
sudo mysql_secure_installation   (y,n,y,y)

Remove anonymous users? [Y/n] y
Disallow root login remotely? [Y/n] n
Remove test database and access to it? [Y/n] y
Reload privilege tables now? [Y/n] y

sudo mysql
CREATE DATABASE mespar_db;
CREATE USER 'mespar_user'@'%' IDENTIFIED WITH mysql_native_password BY 'P@$$w0rd';
GRANT ALL ON mespar_db.* TO 'mespar_user'@'%';
exit;
mysql -u mespar_user -p
SHOW DATABASES;
mysql



** Install Composer

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

sudo mv composer.phar /usr/local/bin/composer
sudo chmod +x /usr/local/bin/composer


** configure nginx

sudo chown -R www-data.www-data /var/www/html/gadd-mespar/storage
sudo chown -R www-data.www-data /var/www/html/gadd-mespar/bootstrap/cache

sudo nano /etc/nginx/sites-available/mespar

write configs

sudo ln -s /etc/nginx/sites-available/mespar /etc/nginx/sites-enabled/
sudo systemctl reload nginx


** install chrome

sudo apt-get install libxss1 libappindicator1 libindicator7
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo apt install ./google-chrome*.deb









############### RHEL 9 #################



## 0| Sudo -i
dnf update -y
## 1| Install php 8.2 and composer

# before any thing make sure if php 8.2 is exist in the appstream  if exist goto reset php -y
 dnf module list php -y 
 
 dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm -y
 rpm -qi epel-release
 dnf -y install http://rpms.remirepo.net/enterprise/remi-release-9.rpm
 rpm -qi remi-release
 dnf module list php -y
 dnf module reset php -y
 dnf module enable php:remi-8.2 -y
 dnf install php -y
 php -v
 dnf install php-{mbstring,xmlrpc,soap,gd,xml,cli, zip, bcmath,tokenizer}



dnf install php-mbstring php-xmlrpc php-soap php-gd php-xml php-cli php-zip php-bcmath php-tokenizer curl nginx mariadb-server


php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

mv composer.phar /usr/local/bin/composer
sudo chmod +x /usr/local/bin/composer

#if composer -v not found do the following:
add these lines to nano ~/.bashrc
if ! [[ "$PATH" =~ "/usr/local/bin" ]]
then
    PATH="/usr/local/bin:$PATH"
fi
export PATH
source ~/.bashrc



### 2| install nginx and configure it

## first remove httpd default
systemctl status httpd
systemctl stop httpd
systemctl disable httpd
dnf remove httpd -y
dnf remove mod_ssl httpd-tools -y
dnf autoremove -y
dnf clean all -y
sudo rm -rf /etc/httpd
sudo rm -rf /var/log/httpd
sudo rm -rf /var/cache/httpd
sudo rm -rf /var/www/html
sudo find / -name 'httpd'
## or  remove it directly
sudo find / -name 'httpd' -exec rm -rf {} +

dnf install nginx -y
cd /etc/nginx/nginx.conf


### 3| install required dev tools (nvm, git)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
source ~/.bashrc
nvm -v
dnf install git -y


### 4 install databse




dnf install curl mariadb-server -y
systemctl enable mariadb
systemctl start mariadb
mysql_secure_installation
Remove anonymous users? [Y/n] y
Disallow root login remotely? [Y/n] n
Remove test database and access to it? [Y/n] y
Reload privilege tables now? [Y/n] y

sudo mysql
CREATE DATABASE mujib_db;
CREATE USER 'mujib_user'@'%' IDENTIFIED BY 'P@$$w0rd';
GRANT ALL PRIVILEGES ON *.* TO 'mujib_user'@'%';
FLUSH PRIVILEGES;
exit;
mysql -u mespar_user -p
SHOW DATABASES;

dnf install php-mysqlnd php-pdo php-pdo_mysql -y
mysql

### Config files: ####

wa.tga

server {
    listen 80;
    server_name mujib.local;

    root /var/www/html/mujib-v3; # Root directory of your Mujib full-stack Laravel application

    index index.html index.htm index.php;

    location / {
        try_files $uri $uri/ /index.php;
    }

    # Handling PHP files for Mujib application
    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php-fpm/www.sock; # Adjust this if your PHP-FPM socket path is different
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    location ~ /\.ht {
        deny all;
    }

    error_page 404 /404.html;
    location = /404.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}







### waapi.tga

server {
    listen 80;
    server_name whatsapp.local;

    root /var/www/html/whatsapp-v3/public; # Root directory of your Mujib full-stack Laravel application

    index index.html index.htm index.php;

    location / {
        try_files $uri $uri/ /index.php;
    }

    # Handling PHP files for Mujib application
    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php-fpm/www.sock; # Adjust this if your PHP-FPM socket path is different
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    location ~ /\.ht {
        deny all;
    }

    error_page 404 /404.html;
    location = /404.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}



wget -O mujib.sql https://wakeb-my.sharepoint.com/:u:/g/personal/i_mansour_wakeb_tech/EWbY_bq0SEBHhx6YLuLTDPEBxVKrXLbjyTVYyjAsxdXqnQ?download=0

mysql -u username -p mydatabase < /path/to/your/file.sql



listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com; # Replace with your domain name

    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt; # Path to your SSL certificate
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key; # Path to your SSL key

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    root /var/www/html; # Path to your website files
    index index.html index.htm index.php;



sudo nano /etc/systemd/system/laravel-websockets.service



[Unit]
Description=Laravel Websockets server
After=network.target

[Service]
User=nginx
Group=nginx
Restart=always
RestartSec=3
WorkingDirectory=/var/www/html/mujib-v3
ExecStart=/usr/bin/php /var/www/html/mujib-v3/artisan websockets:serve

[Install]
WantedBy=multi-user.target




#### NLP #####

python3 -m venv /opt/myapp/venv


[Unit]
Description=My Python App
After=network.target

[Service]
Type=simple
User=myappuser
Group=myappuser
WorkingDirectory=/opt/myapp
ExecStart=/opt/myapp/venv/bin/python /opt/myapp/app.py

[Install]
WantedBy=multi-user.target










